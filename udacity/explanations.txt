###########################################################
# QUESTION 1
###########################################################

The algorithm works in a guaranteed linear time, O(N + M), where N is length of the first string and M is the length of the second.

It maintains a "repository" of available characters, which is initialized with all the characters from the second string.

There are two pointers that can only move left to right: current character and current anagram candidate start position.

Once current character can not be matched to an available place in the repository, the anagram start gets advanced.

Since we know that this is an ASCII string, the "repository" data structure is just a static array of 255 character counts (but it could be a dictionary as well).
This makes for a O(1) memory usage.

###########################################################
# QUESTION 2
###########################################################

Computational complexity is quadratic, O(N^2), I am using a simple algorithm here:
 - for which position inside the string find longest palindrome with the middle at that location. 
   At every location it's done for both odd and even palindrome character counts
 - the maximum of those is taken and the substring is extracted.

 Memory complexity is O(1).

 I am pretty sure it could have been done with a lower complexity, but no simple solution came to mind, so I left it at that.

###########################################################
# QUESTION 3
###########################################################

The problem statement was (intentionally?..) somewhat ambiguous.

Are we required to include each edge twice, in both directions (and does the input necessarily do that)?
Can the input graph be disjoint?

I am assuming that it's "yes" in all cases and use Kruskal's algorithm. 
It has complexity of O(E*logE), where E is the number of edges. 


###########################################################
# QUESTION 4
###########################################################

The algorithm first traverses path to the root from the first node, remembering all the nodes on the way in a set.
Then, it traverses the path to the root from the second node, looking for the first node to be in the set above.

Computatinal complexity is O(N^2), where N is the number of nodes in the graph.
This is due to the unfortunate way the graph representation is stored - we need a linear time to 
find the parent's index of each node.

Because of that the set lookup on the second pass is kind of inessential 
(it's normally constant, since the set is implemented as hash table, but even if it was a linear lookup - 
it would not make the computational complexity worse).


Memory complexity is O(N), since we allocate an extra set to store the nodes from the path on the 

Of course, this could be mitigated by building a helper array that would store parent indices for every node directly
(at the cost of extra O(N) memory and remembering it). 
That would make a lot of sense if this function is called many times on the same graph.

###########################################################
# QUESTION 5
###########################################################

This one has a linear complexity, O(N) in computation and O(M) in memory 
(where N is the length of list and M is the element index to find from the end).


I am using an explicit deque data structure, as opposed to possibly writing a fancy recursive function,
because running the latter with big M could just blow up the stack.